% Using ensemble-SRC to calculate accuracy on IOT dataset
tic

clc
close
clear

% read labels and select some of them randomly for our experiment
labels = csvread('labels.csv');

n = length(labels);
indice = randperm(n);

% define no of selected samples
no_of_samples = 100;

% select the intended labels
selected_labels = labels(indice(1:no_of_samples));

% read the first dataset according to TF-IDF and select the intended samples
dataset = csvread('tfidf.csv');
selected_dataset_1 = dataset(indice(1:no_of_samples), :);

% read the second dataset according to AE of opcode and select the intended samples
dataset = csvread('AE_Fre.csv');
selected_dataset_2 = dataset(indice(1:no_of_samples), :);

% read the third dataset according to frequency of opcode and select the intended samples
dataset = csvread('freqo.csv');
selected_dataset_3 = dataset(indice(1:no_of_samples), :);

% each time extract one sample as test and predict the class label using all other ones
sp_level = .03;
N=sp_level*(no_of_samples-1);

predictions1 = zeros(no_of_samples, 1);
predictions2 = zeros(no_of_samples, 1);
predictions3 = zeros(no_of_samples, 1);

for i = 1:no_of_samples
    % select train labels
    Trainlabels = selected_labels;
    Trainlabels(i,:) = [];
    % select train and test samples from dataset 1
    Traindata_1 = selected_dataset_1;
    Testdata_1 = Traindata_1(i, :);
    Traindata_1(i, :) = [];
    % select train and test samples from dataset 2
    Traindata_2 = selected_dataset_2;
    Testdata_2 = Traindata_2(i, :);
    Traindata_2(i, :) = [];
    % select train and test samples from dataset 3
    Traindata_3 = selected_dataset_3;
    Testdata_3 = Traindata_3(i, :);
    Traindata_3(i, :) = [];
     
    % sparse_represent function for dataset 1
    K_Tr_1 = Traindata_1*Traindata_1';
    K_te_1 = Traindata_1*Testdata_1';
    K_y_1 = Testdata_1*Testdata_1';
    
    % sparse_represent function for dataset 2
    K_Tr_2 = Traindata_2*Traindata_2';
    K_te_2 = Traindata_2*Testdata_2';
    K_y_2 = Testdata_2*Testdata_2';
    
    % sparse_represent function for dataset 3
    K_Tr_3 = Traindata_3*Traindata_3';
    K_te_3 = Traindata_3*Testdata_3';
    K_y_3 = Testdata_3*Testdata_3';
    
    % define uniqe labels
    uniqelabels=unique(Trainlabels);
    c=max(size(uniqelabels));
    
    % sparse_represent_kernelized function for dataset 1
    cvx_begin
      cvx_quiet(true);
      % one sample eliminated for test
      variable A(1,no_of_samples-1);
      minimize A*K_Tr_1*transpose(A)+K_y_1-transpose(K_te_1)*transpose(A)-A*K_te_1;
      norm(A,1) <= N;
    cvx_end
    
    % SRC function for dataset 1
    src_scores = zeros(1, c);
    for j=1:c
        R=Testdata_1 - A(:,find(Trainlabels==uniqelabels(j)))*Traindata_1(find(Trainlabels==uniqelabels(j)),:);
        src_scores(:,j)=sqrt(sum(R.*R,2));
    end
    [maxval, indices] = min(src_scores');
    predictions1(i, 1) = uniqelabels(indices);
    
    % sparse_represent_kernelized function for dataset 2
    cvx_begin
      cvx_quiet(true);
      % one sample eliminated for test
      variable A(1,no_of_samples-1);
      minimize A*K_Tr_2*transpose(A)+K_y_2-transpose(K_te_2)*transpose(A)-A*K_te_2;
      norm(A,1) <= N;
    cvx_end
    
    % SRC function for dataset 2
    src_scores = zeros(1, c);
    for j=1:c
        R=Testdata_2 - A(:,find(Trainlabels==uniqelabels(j)))*Traindata_2(find(Trainlabels==uniqelabels(j)),:);
        src_scores(:,j)=sqrt(sum(R.*R,2));
    end
    [maxval, indices] = min(src_scores');
    predictions2(i, 1) = uniqelabels(indices);
    
    % sparse_represent_kernelized function for dataset 3
    cvx_begin
      cvx_quiet(true);
      % one sample eliminated for test
      variable A(1,no_of_samples-1);
      minimize A*K_Tr_3*transpose(A)+K_y_3-transpose(K_te_3)*transpose(A)-A*K_te_3;
      norm(A,1) <= N;
    cvx_end
    
    % SRC function for dataset 3
    src_scores = zeros(1, c);
    for j=1:c
        R=Testdata_3 - A(:,find(Trainlabels==uniqelabels(j)))*Traindata_1(find(Trainlabels==uniqelabels(j)),:);
        src_scores(:,j)=sqrt(sum(R.*R,2));
    end
    [maxval, indices] = min(src_scores');
    predictions3(i, 1) = uniqelabels(indices);
        
end

predictions = (predictions1+predictions2+predictions3)/3;
predictions(predictions>0.5) =1;
predictions(predictions<0.5) =0;
accuracy = sum(selected_labels==predictions) /no_of_samples

toc